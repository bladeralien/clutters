/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2013 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package org.glassfish.grizzly.filterchain;

/**
 * A token representing the registration of a {@link Filter} with a {@link FilterChain}.
 * 
 * The same {@link Filter} instance could be registered on a {@link FilterChain}
 * one or more times, and each {@link Filter} instance registration will be
 * represented by a unique <tt>FilterReg</tt> object.
 * 
 * Each <tt>FilterReg</tt> belonging to the same {@link FilterChain} has a
 * unique name, given explicitly by a user, or automatically generated by Grizzly.
 */
public final class FilterReg {

    // the FilterChain, to which the Filter belongs
    final FilterChain filterChain;
    // the Filter name
    final String name;
    // the Filter
    final Filter filter;
    // service filter flag
    final boolean isService;
    // the next filter registration in the chain
    volatile FilterReg next;
    // the previous filter registration in the chain
    volatile FilterReg prev;
    // state flag
    boolean isEverHadState;
    
    // FilterReg key, which allows to share the FilterChain state b/w
    // different FilterReg instances (create copies)
    final Key key;

    FilterReg(final FilterChain filterChain, final Filter filter,
            final String name, final boolean isService) {
        if (filter == null) {
            throw new NullPointerException("The Filter can not be null");
        }

        if (filterChain == null) {
            throw new NullPointerException("The FilterChain can not be null");
        }

        this.name = name;
        this.filter = filter;
        this.filterChain = filterChain;
        this.isService = isService;
        key = new Key();
    }

    FilterReg(final FilterChain filterChain, final FilterReg filterReg) {
        if (filterReg == null) {
            throw new NullPointerException("The FilterReg can not be null");
        }

        if (filterChain == null) {
            throw new NullPointerException("The FilterChain can not be null");
        }

        if (filterChain == filterReg.filterChain()) {
            throw new IllegalStateException("Can not copy registrations from the same filter chain");
        }

        this.name = filterReg.name;
        this.filter = filterReg.filter;
        this.filterChain = filterChain;
        this.isService = filterReg.isService;
        this.key = filterReg.key;
        this.isEverHadState = filterReg.isEverHadState;
    }

    /**
     * @return the {@link FilterChain} to which this {@link Filter}
     *         registration belongs
     */
    public FilterChain filterChain() {
        return filterChain;
    }
    
    /**
     * @return the {@link Filter}
     */
    public Filter filter() {
        return filter;
    }

    /**
     * @return the registration's unique name, given explicitly by a user,
     *         or automatically generated by Grizzly. All the <tt>FilterReg</tt>s
     *         belonging to the same {@link FilterChain} have unique names.
     */
    public String name() {
        return name;
    }

    /**
     * @return the next {@link Filter} registration in the {@link FilterChain},
     *         or <tt>null</tt> if the current {@link Filter} registration is the last
     *         in the chain
     */
    public FilterReg next() {
        final FilterReg nextReg = next;
        return nextReg != null && !nextReg.isService ? nextReg : null;
    }

    /**
     * @return the previous {@link Filter} registration in the {@link FilterChain},
     *         or <tt>null</tt> if the current {@link Filter} registration is the first
     *         in the chain
     */
    public FilterReg prev() {
        final FilterReg prevReg = prev;
        return prevReg != null && !prevReg.isService ? prevReg : null;
    }
    
    protected static final class Key {
    }
}